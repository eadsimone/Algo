/*
* Summing up the individual digits for each number from 0 to k (0<=k<=10000000),
* return how many times the most common sum occurs.
* Examples:
* k=10 gives 2 (since 1 and 10 both sum up to 1)
* k=50 gives 6 (since 5, 14, 23, 32, 41, 50 all sum up to 5).
*/
public int mostCommonSum(int k) {
Hashtable<Integer, Integer> counter = new Hashtable<Integer, Integer>();
		for (int i = 0; i <= k; i++ ){
			Integer currentSum = new Integer(sumDecimals(i));
			if (counter.containsKey(currentSum)){
				int aux = counter.remove(currentSum).intValue();
				counter.put(currentSum, new Integer(aux + 1));
			}
			else
				counter.put(currentSum, new Integer(1));
		}
		Enumeration<Integer> e = counter.keys();
    int max = 0;
    while (e.hasMoreElements()){
    int sum = counter.get(e.nextElement()).intValue();
    if (max < sum)
    max = sum;
    }
    return max;
    }

    private int sumDecimals (int number){
    int aux = number;
    int sumDig = 0;
    while (aux != 0){
    sumDig = sumDig + (aux % 10);
    aux = aux / 10;
    }
    return sumDig;

    }